SELECT table_fields ('test')
---- функция возвращает массив столбцов


CREATE OR REPLACE FUNCTION table_fields (tbl varchar) RETURNS varchar []  AS
$body$
DECLARE
  ret varchar[];
  row varchar;
 curs  CURSOR FOR SELECT  a.attname::varchar  field
    FROM pg_attribute a, pg_class c, pg_type t, pg_namespace n
    WHERE n.nspname = 'public' AND a.attnum > 0 AND a.attrelid = c.oid 
	AND a.atttypid = t.oid AND n.oid = c.relnamespace 
	and c.relname::varchar=tbl
    order by 1;
begin
open curs;
  LOOP
    FETCH FROM curs INTO row;
    EXIT WHEN NOT FOUND;
    ret := array_append(ret,row);
  END LOOP;
  RETURN ret;
END;
    $body$
LANGUAGE 'plpgsql'

SELECT table_values ('test','id',1)
-- функция возвращает массив строк

CREATE OR REPLACE FUNCTION table_values (tbl text, keyf text, keyv int ) 
RETURNS varchar []  AS
$body$
DECLARE
   ret varchar[];
	i int := 1;
     row varchar;
	   row_val varchar;
curs  CURSOR FOR SELECT  a.attname::varchar  field
    FROM pg_attribute a, pg_class c, pg_type t, pg_namespace n
    WHERE n.nspname = 'public' AND a.attnum > 0 AND a.attrelid = c.oid AND a.atttypid = t.oid AND n.oid = c.relnamespace and c.relname::varchar=tbl
    order by 1;
begin
open curs;
  LOOP
    FETCH FROM curs INTO row;
    EXIT WHEN NOT FOUND;
EXECUTE format('select %I from  %I where id = $1', quote_ident(row), quote_ident(tbl))	INTO row_val  USING    keyv;
  ret := array_append(ret,row_val);
	   i := i+1;
  END LOOP;

  RETURN ret;
END;
    $body$
LANGUAGE 'plpgsql'



----- кладем друг на друга как масло на хлеб и получаем unpivot


select * from 
unnest(table_fields ('test')::text[], 
	   table_values ('test','id',1)::text[])

"col1"	"a1"
"id"	"1"




